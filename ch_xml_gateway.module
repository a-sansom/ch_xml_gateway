<?php
/**
 * @file
 * Module interacts with the Companies House XML output gateway.
 */


/**
 * Implements hook_help().
 */
function ch_xml_gateway_help($path, $arg) {
  if ($path == 'admin/help#ch_xml_gateway') {
    global $user;
    $help_text = "<p>This module Module enables Drupal to access to the
      Companies House XML (output) Gateway using the php-govtalk library.</p>
      <p>This module does not currently support the 'input' part to the
      Companies House XML Gateway that allows companies to file documents at
      Companies House, only the 'output' part that enables querying of
      currrent information held at Companies House.</p>
      <p>Current search pages/forms, also avaialable as Drupal blocks, are:</p>
      <ul>
      <li>" . l(t('Company search (by alphakey)'), 'chxmlgw/company-search') . "</li>
      <li>" . l(t('Company details (from CH company number)'), 'chxmlgw/company-details') . "</li>
      <li>" . l(t('Officer search (by name)'), 'chxmlgw/officer-search') . "</li>
      <li>" . l(t('Company appointments search (by CH company number)'), 'chxmlgw/appointments-search') . "</li>
      <li>" . l(t('User gateway usage history'), 'chxmlgw/gateway-history/user/' . $user->uid) . "</li>
      </ul>
      <p>You will need to configure " . l(t('module permissions'), 'admin/people/permissions') . "
      so that users can access the gateway.</p>
      <p>Users can view their gateway usage history via a link on their
      account page. Apart from user id=1, users cannot view other users
      history.</p>
      <p>Information about the XML Gateway can be found at " . l(t('http://xmlgw.companieshouse.gov.uk/'), 'http://xmlgw.companieshouse.gov.uk/')
      . " and information about the php-govtalk library can be found at " . l(t('http://code.google.com/p/php-govtalk/'), 'http://code.google.com/p/php-govtalk/') . "
      .</p><p>Please also read the module README file.</p>";

    return $help_text;
  }
}


/**
 * Implements hook_permission().
 */
function ch_xml_gateway_permission() {
  return array(
    'query namesearch' => array(
      'title' => 'Query NameSearch',
      'description' => 'Allow user to query the NameSearch service',
    ),
    'query companydetails' => array(
      'title' => 'Query CompanyDetails',
      'description' => 'Allow user to query the CompanyDetails service',
    ),
    'query companyappointments' => array(
      'title' => 'Query CompanyAppointments',
      'description' => 'Allow user to query the CompanyAppointments service',
    ),
    'query officersearch' => array(
      'title' => 'Query OfficerSearch',
      'description' => 'Allow user to query the OfficerSearch service',
    ),
    'query officerdetails' => array(
      'title' => 'Query OfficerDetails',
      'description' => 'Allow user to query the OfficerDetails service',
    ),
  );
}


/**
 * Implements hook_menu().
 */
function ch_xml_gateway_menu() {
  // Admin settings.
  $items['admin/config/services/chxmlgw'] = array(
    'title' => 'Companies House XML Gateway',
    'title callback' => 't',
    'description' => 'Settings affecting interaction with XML gateway.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ch_xml_gateway_settings_form'),
    'access arguments' => array('administer users'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'ch_xml_gateway.admin.inc',
  );

  // Admin default tab (inherits 'admin/config/services/chxmlgw' page callback).
  $items['admin/config/services/chxmlgw/gateway-options'] = array(
    'title' => 'Gateway Options',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  // Admin search form(s) options tab.
  $items['admin/config/services/chxmlgw/search-form-options'] = array(
    'title' => 'Search Form Options',
    'title callback' => 't',
    'page callback' => 'ch_xml_gateway_search_options_page',
    'page arguments' => '',
    'access arguments' => array('administer users'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'ch_xml_gateway.admin.inc',
  );

  // Searching an officer by their name.
  // OfficerSearch page.
  $items['chxmlgw/officer-search'] = array(
    'title' => 'OfficerSearch',
    'title callback' => 't',
    'page callback' => '_officer_search_page',
    'page arguments' => '',
    'access callback' => 'user_access',
    'access arguments' => array('query officersearch'),
    'type' => MENU_NORMAL_ITEM,
  );

  // Results of an OfficerSearch.
  $items['chxmlgw/officer-search-result'] = array(
    'title' => '',
    'title callback' => 't',
    'page callback' => '_officer_search_result_page',
    'page arguments' => '',
    'access callback' => 'user_access',
    'access arguments' => array('query officersearch'),
    'type' => MENU_CALLBACK,
  );

  // Getting officer details via the Companies House encrypted officer id
  // OfficerDetails page.
  $items['chxmlgw/officer-details/%'] = array(
    'title' => 'OfficerDetails',
    'title callback' => 't',
    'page callback' => '_officer_details_page',
    'page arguments' => array(2),
    'access callback' => 'user_access',
    'access arguments' => array('query officerdetails'),
    'type' => MENU_CALLBACK,
  );

  // OfficerDetails JSON.
  $items['chxmlgw/json/officer-details/%'] = array(
    'title' => '',
    'page callback' => '_officer_details_json',
    'page arguments' => array(3),
    'access callback' => 'user_access',
    'access arguments' => array('query officerdetails'),
    'type' => MENU_CALLBACK,
  );

  // Searching for a company by alpha key.
  $items['chxmlgw/company-search'] = array(
    'title' => 'NameSearch',
    'title callback' => 't',
    'page callback' => '_company_search_page',
    'page arguments' => '',
    'access callback' => 'user_access',
    'access arguments' => array('query namesearch'),
    'type' => MENU_NORMAL_ITEM,
  );

  // Results of a NameSearch.
  $items['chxmlgw/company-search/%'] = array(
    'title' => 'NameSearch',
    'title callback' => 't',
    'page callback' => '_company_search_result_page',
    'page arguments' => array(2),
    'access callback' => 'user_access',
    'access arguments' => array('query namesearch'),
    'type' => MENU_CALLBACK,
  );

  // Retrieve company details by its Companies House company number.
  // CompanyDetails page.
  $items['chxmlgw/company-details'] = array(
    'title' => 'CompanyDetails',
    'title callback' => 't',
    'page callback' => '_company_details_page',
    'page arguments' => '',
    'access callback' => 'user_access',
    'access arguments' => array('query companydetails'),
    'type' => MENU_CALLBACK,
  );

  // Results of an CompanyDetails.
  $items['chxmlgw/company-details/%'] = array(
    'title' => 'CompanyDetails',
    'title callback' => 't',
    'page callback' => '_company_details_result_page',
    'page arguments' => array(2),
    'access callback' => 'user_access',
    'access arguments' => array('query companydetails'),
    'type' => MENU_CALLBACK,
  );

  // Searching for company appointments by company number.
  $items['chxmlgw/appointments-search'] = array(
    'title' => 'CompanyAppointments',
    'title callback' => 't',
    'page callback' => '_company_appointments_search_page',
    'page arguments' => '',
    'access callback' => 'user_access',
    'access arguments' => array('query companyappointments'),
    'type' => MENU_CALLBACK,
  );

  // Getting a companys appointments from its Companies House company number.
  // Results of an CompanyAppointments search.
  $items['chxmlgw/appointments-search/%'] = array(
    'title' => 'CompanyAppointments',
    'title callback' => 't',
    'page callback' => '_appointments_search_result_page',
    'page arguments' => array(2),
    'access callback' => 'user_access',
    'access arguments' => array('query companyappointments'),
    'type' => MENU_CALLBACK,
  );

  // Show history of a users gateway usage.
  $items['chxmlgw/gateway-history/user/%'] = array(
    'title' => '',
    'title callback' => '_gateway_history_page_title',
    'title arguments' => array(3),
    'page callback' => '_user_gateway_history_page',
    'page arguments' => array(3),
    'access callback' => '_gateway_history_page_access',
    'access arguments' => array(3),
    'type' => MENU_CALLBACK,
  );

  // Show the details of a previously run gateway query.
  $items['chxmlgw/gateway-history/user/%/%'] = array(
    'title' => 'Previous gateway query result',
    'title callback' => 't',
    'page callback' => '_gateway_previous_query_page',
    'page arguments' => array(3, 4),
    'access callback' => '_gateway_history_page_access',
    'access arguments' => array(3),
    'type' => MENU_CALLBACK,
  );

  return $items;
}


/**
 * Implements hook_block_info().
 */
function ch_xml_gateway_block_info() {
  $blocks = array();

  $blocks['ch-xml-gateway-company-search'] = array(
    'info' => t('Companies House XML Gateway: Company Search'),
  );
  $blocks['ch-xml-gateway-company-details'] = array(
    'info' => t('Companies House XML Gateway: Company Details'),
  );
  $blocks['ch-xml-gateway-company-appts'] = array(
    'info' => t('Companies House XML Gateway: Company Appointments'),
  );
  $blocks['ch-xml-gateway-officer-search'] = array(
    'info' => t('Companies House XML Gateway: Officer Search'),
  );

  return $blocks;
}


/**
 * Implements hook_block_view().
 *
 * Blocks are only visible if the user has permission to user the
 * service the block contains the form for.
 */
function ch_xml_gateway_block_view($delta = '') {
  $block = array();
  if ($delta === 'ch-xml-gateway-company-search') {
    if (user_access('query namesearch')) {
      $block['subject'] = t('NameSearch');
      $block['content'] = drupal_get_form('_company_search_form');
    }
  }
  elseif ($delta === 'ch-xml-gateway-company-details') {
    if (user_access('query companydetails')) {
      $block['subject'] = t('CompanyDetails');
      $block['content'] = drupal_get_form('_company_details_form');
    }
  }
  elseif ($delta === 'ch-xml-gateway-company-appts') {
    if (user_access('query companyappointments')) {
      $block['subject'] = t('CompanyAppointments');
      $block['content'] = drupal_get_form('_appointments_search_form');
    }
  }
  elseif ($delta === 'ch-xml-gateway-officer-search') {
    if (user_access('query officersearch')) {
      $params = array(
        'form_instructions' => '',
        'single_name' => 1,
        'show_all_forename' => 0,
        'show_town' => 0,
        'show_officer_type' => 0,
        'show_resigned_ind' => 0,
      );

      $block['subject'] = t('OfficerSearch');
      $block['content'] = drupal_get_form('_officer_search_form', $params);
    }
  }

  return $block;
}


/**
 * Implements hook_user_view().
 */
function ch_xml_gateway_user_view($account, $view_mode, $langcode) {
  if ($view_mode == 'full') {
    $account->content['summary']['chxmlgw'] = array(
      '#type' => 'user_profile_item',
      '#title' => t('Companies House XML Gateway'),
      '#markup' => l(t('View your gateway searches'), 'chxmlgw/gateway-history/user/' . $account->uid),
    );
  }
}


/**
 * Form to search for company details based upon a user entered text string.
 *
 * @return array
 *   Form as per the Drupal form API.
 */
function _company_search_form($form, &$form_state) {
  $form['alpha_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Company name'),
    '#required' => TRUE,
    '#default_value' => '',
    '#size' => 30,
    '#maxlength' => 160,
    '#description' => 'Enter a company name that you would like to find.',
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
  );

  return $form;
}


/**
 * Handle submission of the form.
 */
function _company_search_form_submit($form, &$form_state) {
  $form_values = $form_state['values'];
  drupal_goto('chxmlgw/company-search/' . trim($form_values['alpha_key']));
}


/**
 * Search for company appointments given a Companies House company number.
 *
 * @return array
 *   Form as per the Drupal form API.
 */
function _appointments_search_form($form, &$form_state) {
  $form['company_number'] = array(
    '#type' => 'textfield',
    '#title' => t('Company number'),
    '#required' => TRUE,
    '#default_value' => '',
    '#size' => 30,
    '#maxlength' => 8,
    '#description' => '',
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
  );

  return $form;
}


/**
 * Validate the company number given before trying search.
 *
 * @todo Refactor all forms that check common values to use a common validation
 * function.
 */
function _appointments_search_form_validate($form, &$form_state) {
  $form_values = $form_state['values'];
  if (!_valid_company_number(trim($form_values['company_number']))) {
    form_set_error('', t('Error! Invalid company number.'));
  }
}


/**
 * Go on to request CompanyAppointments.
 */
function _appointments_search_form_submit($form, &$form_state) {
  $form_values = $form_state['values'];
  drupal_goto('chxmlgw/appointments-search/' . trim($form_values['company_number']));
}


/**
 * Search for company details based upon a Companies House company number.
 *
 * @return array
 *   Form as per the Drupal form API.
 */
function _company_details_form($form, &$form_state) {
  $form['company_number'] = array(
    '#type' => 'textfield',
    '#title' => t('Company number'),
    '#required' => TRUE,
    '#default_value' => '',
    '#size' => 30,
    '#maxlength' => 8,
    '#description' => 'The 8 character registered companies house number of
      the company you want to know more about, eg. 03176906',
  );

  // $options_zero_or_one = array(
  // '1' => t('True'),
  // '0' => t('False'),
  // );
  // $form['company_details']['give_mort_totals'] = array(
  // '#type' => 'radios',
  // '#title' => t('GiveMortTotals'),
  // '#default_value' => 0,
  // '#options' => $options_zero_or_one,
  // );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
  );

  return $form;
}


/**
 * Validate submitted values.
 */
function _company_details_form_validate($form, &$form_state) {
  $form_values = $form_state['values'];
  if (!_valid_company_number(trim($form_values['company_number']))) {
    form_set_error('', t('Error! Invalid company number.'));
  }
}


/**
 * After validation of values, go and do the company search...
 */
function _company_details_form_submit($form, &$form_state) {
  $form_values = $form_state['values'];
  drupal_goto('chxmlgw/company-details/' . trim($form_values['company_number']));
}


/**
 * Search form to enable search for a company officer by their name.
 *
 * @return array
 *   Form defined as per the Drupal form API.
 */
function _officer_search_form($form, &$form_state, $form_options = array('form_instructions' => '', 'single_name' => 1, 'show_all_forename' => 1, 'show_town' => 1, 'show_officer_type' => 1, 'show_resigned_ind' => 1)) {
  // select/radio control options.
  $options_zero_or_one = array(
    '1' => t('True'),
    '0' => t('False'),
  );

  $options_officer_type = array(
    'DIS' => t('Disqualified Directors only'),
    'LLP' => t('Limited Liability Partnerships'),
    'CUR' => t('Not above'),
    'EUR' => t('SE and ES appointments only'),
  );

  if (!empty($form_options['form_instructions'])) {
    $form['instructions'] = array(
      '#prefix' => '<div class="form-instructions">',
      '#suffix' => '</div>',
      '#markup' => check_plain($form_options['form_instructions']),
    );
  }

  // Single or multiple name inputs.
  if ($form_options['single_name'] == 1) {
    $form['officer_name'] = array(
      '#type' => 'textfield',
      '#title' => t('Name'),
      '#required' => TRUE,
      '#default_value' => '',
      '#size' => 30,
      '#maxlength' => 250,
    );
  }
  else {
    // Up to two forename elements in the request are allowed.
    $form['officer_forename_1'] = array(
      '#type' => 'textfield',
      '#title' => t('Forename'),
      '#required' => TRUE,
      '#default_value' => '',
      '#size' => 30,
      '#maxlength' => 250,
    );

    // Include in form if configured to.
    if ($form_options['show_all_forename'] == 1) {
      $form['officer_forename_2'] = array(
        '#type' => 'textfield',
        '#title' => t('Forename'),
        '#required' => FALSE,
        '#default_value' => '',
        '#size' => 30,
        '#maxlength' => 250,
      );
    }

    $form['officer_surname'] = array(
      '#type' => 'textfield',
      '#title' => t('Surname'),
      '#required' => TRUE,
      '#default_value' => '',
      '#size' => 30,
      '#maxlength' => 250,
    );
  }

  // Include in form if configured to.
  if ($form_options['show_town'] == 1) {
    $form['posttown'] = array(
      '#type' => 'textfield',
      '#title' => t('Town'),
      '#required' => FALSE,
      '#default_value' => '',
      '#size' => 30,
      '#maxlength' => 250,
    );
  }

  // Include in form if configured to.
  if ($form_options['show_officer_type'] == 1) {
    $form['officer_type'] = array(
      '#type' => 'select',
      '#title' => t('Type'),
      '#required' => TRUE,
      '#default_value' => variable_get('ch_xml_gateway_OfficerSearch_OfficerType', 'CUR'),
      '#options' => $options_officer_type,
    );
  }

  // Include in form if configured to.
  if ($form_options['show_resigned_ind'] == 1) {
    $form['include_resigned_ind'] = array(
      '#type' => 'radios',
      '#title' => t('Include resigned appointments?'),
      '#required' => TRUE,
      '#default_value' => variable_get('ch_xml_gateway_OfficerSearch_IncludeResignedInd', 0),
      '#options' => $options_zero_or_one,
    );
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
  );

  return $form;
}


/**
 * Submit values to OfficerSearch.
 *
 * @todo This needs to be converted to use URL params. Slightly tricky due to
 * the possible combinations of fields in the form.
 */
function _officer_search_form_submit($form, &$form_state) {
  $form_values = $form_state['values'];
  $querystring = array();

  // Split single field into tokens, if it exists...
  if (array_key_exists('officer_name', $form_values)) {
    $querystring['officer_name'] = $form_values['officer_name'];
  }
  else {
    if (!empty($form_values['officer_forename_1'])) {
      $querystring['forename_1'] = $form_values['officer_forename_1'];
    }

    if (!empty($form_values['officer_forename_2'])) {
      $querystring['forename_2'] = $form_values['officer_forename_2'];
    }

    if (!empty($form_values['officer_surname'])) {
      $querystring['surname'] = $form_values['officer_surname'];
    }
  }

  if (!empty($form_values['posttown'])) {
    $querystring['town'] = $form_values['posttown'];
  }

  if (!empty($form_values['officer_type'])) {
    $querystring['type'] = $form_values['officer_type'];
  }
  else {
    $querystring['type'] = variable_get('ch_xml_gateway_OfficerSearch_OfficerType', 'CUR');
  }

  if (!empty($form_values['include_resigned_ind'])) {
    $querystring['resigned_ind'] = $form_values['include_resigned_ind'];
  }
  else {
    $querystring['resigned_ind'] = variable_get('ch_xml_gateway_OfficerSearch_IncludeResignedInd', '0');
  }

  drupal_goto('chxmlgw/officer-search-result', array('query' => $querystring));
}


/**
 * Page containing form to enable search by a text string.
 *
 * @return array
 *   Markup containing form.
 */
function _company_search_page() {
  drupal_add_css(drupal_get_path('module', 'ch_xml_gateway') . '/css/ch_xml_gateway-default.css', 'module', 'all', TRUE);
  $form = drupal_get_form('_company_search_form');

  $output['content'] = array(
    '#theme' => 'company_search_page',
    '#form' => render($form),
  );

  return $output;
}


/**
 * Page to display the results of a search for a company by text.
 *
 * @return array
 *   Markup showing a set of search results.
 */
function _company_search_result_page($company_name) {
  drupal_add_css(drupal_get_path('module', 'ch_xml_gateway') . '/css/ch_xml_gateway-default.css', 'module', 'all', TRUE);
  $output = _query_gateway('NameSearch', 'html', '', NULL, '', check_plain($company_name));

  return $output;
}


/**
 * Officer search page.
 *
 * @return array
 *   Render array containing the officer search form.
 */
function _officer_search_page() {
  drupal_add_css(drupal_get_path('module', 'ch_xml_gateway') . '/css/ch_xml_gateway-default.css', 'module', 'all', TRUE);
  $form = drupal_get_form(
    '_officer_search_form',
    array(
      'form_instructions' => variable_get('ch_xml_gateway_form_settings_OfficerSearch_form_instructions', ''),
      'single_name' => variable_get('ch_xml_gateway_form_settings_OfficerSearch_single_name_input', '1'),
      'show_all_forename' => variable_get('ch_xml_gateway_form_settings_OfficerSearch_show_all_forename', '1'),
      'show_town' => variable_get('ch_xml_gateway_form_settings_OfficerSearch_show_town', '1'),
      'show_officer_type' => variable_get('ch_xml_gateway_form_settings_OfficerSearch_show_officer_type', '1'),
      'show_resigned_ind' => variable_get('ch_xml_gateway_form_settings_OfficerSearch_show_include_resigned', '1'),
    )
  );

  $output['content'] = array(
    '#theme' => 'officer_search_page',
    '#form' => render($form),
  );

  return $output;
}


/**
 * Officer search results page.
 *
 * @return array
 *   Renderable array for results of an officer search.
 *
 * @todo Convert the officer search functionality to use URL arguments
 */
function _officer_search_result_page() {
  $output = array();
  $forenames = '';
  $town = '';
  drupal_add_css(drupal_get_path('module', 'ch_xml_gateway') . '/css/ch_xml_gateway-default.css', 'module', 'all', TRUE);
  $use_ajax = variable_get('ch_xml_gateway_form_settings_all_ajax_searches', 0);

  if ($use_ajax) {
    drupal_add_library('system', 'ui.dialog');
    drupal_add_js(drupal_get_path('module', 'ch_xml_gateway') . '/js/ch_xml_gateway.js');
    // Add to Drupal.settings values to make available in client javascript.
    drupal_add_js(
      array(
        'chXmlGateway' =>
        array(
          'jsonUrlStub' => url('chxmlgw/json', array('absolute' => TRUE)),
          'accessOfficerDetails' => user_access('query officerdetails'),
        ),
      ),
      'setting'
    );
  }

  if (!empty($_GET['officer_name'])) {
    $names = explode(' ', $_GET['officer_name']);
    $total_names = count($names);

    if ($total_names > 1) {
      $_GET['surname'] = $names[$total_names - 1];

      if ($total_names == 2) {
        $_GET['forename_1'] = $names[0];
      }
      elseif ($total_names >= 3) {
        // Gateway takes a maximum of 2 forenames.
        $_GET['forename_1'] = $names[0];
        $_GET['forename_2'] = $names[1];
      }
    }
    else {
      // Treat the only entered name as the surname (the minimum that the
      // gateway will accept).
      $_GET['surname'] = $names[0];
    }
  }
  else {
    if (!empty($_GET['forename_2'])) {
      $forenames = array(check_plain($_GET['forename_1']), check_plain($_GET['forename_2']));
    }
    else {
      $forenames = check_plain($_GET['forename_1']);
    }
  }

  if (!empty($_GET['town'])) {
    $town = $_GET['town'];
  }

  $officer_search_settings = array(
    'forename' => $forenames,
    'surname' => check_plain($_GET['surname']),
    'posttown' => check_plain($town),
    'officer_type' => check_plain($_GET['type']),
    'resigned_ind' => check_plain($_GET['resigned_ind']),
  );

  $output = _query_gateway('OfficerSearch', 'html', '', $officer_search_settings, '', '');

  return $output;
}


/**
 * Company search page.
 *
 * @return array
 *   Renderable array to search for commpany details (by company number).
 */
function _company_details_page() {
  drupal_add_css(drupal_get_path('module', 'ch_xml_gateway') . '/css/ch_xml_gateway-default.css', 'module', 'all', TRUE);
  $form = drupal_get_form('_company_details_form');
  $output['content'] = array(
    '#theme' => 'company_details_page',
    '#form' => render($form),
  );

  return $output;
}


/**
 * Display the details of a company.
 *
 * @return string
 *   Markup containig the results of a search for a company.
 */
function _company_details_result_page($company_number = '') {
  $output = '';
  drupal_add_css(drupal_get_path('module', 'ch_xml_gateway') . '/css/ch_xml_gateway-default.css', 'module', 'all', TRUE);
  if (_valid_company_number(trim($company_number))) {
    $output = _query_gateway('CompanyDetails', 'html', trim($company_number), NULL, '', '');
  }
  else {
    $output = t('No company number supplied');
  }

  return $output;
}


/**
 * Display the details of a particular officer.
 *
 * @return string
 *   Markup containing the results of a search for a single officer.
 */
function _officer_details_page($officer_id) {
  drupal_add_css(drupal_get_path('module', 'ch_xml_gateway') . '/css/ch_xml_gateway-default.css', 'module', 'all', TRUE);
  $output = _query_gateway('OfficerDetails', 'html', '', NULL, base64_decode($officer_id), '');

  return $output;
}


/**
 * Retrieve details of a particular officer in a JSON format.
 *
 * @return string
 *   JSON structure representing a single officers details and their
 *   appointment(s) info.
 */
function _officer_details_json($officer_id) {
  $output = _query_gateway('OfficerDetails', 'json', '', NULL, base64_decode($officer_id), '');
  drupal_json_output($output);
}


/**
 * Appointments search page.
 *
 * @return array
 *   Renderable array to enable search of company appointments using a company
 *   number.
 */
function _company_appointments_search_page() {
  drupal_add_css(drupal_get_path('module', 'ch_xml_gateway') . '/css/ch_xml_gateway-default.css', 'module', 'all', TRUE);
  $form = drupal_get_form('_appointments_search_form');
  $output['content'] = array(
    '#theme' => 'company_appointments_search_page',
    '#form' => render($form),
  );

  return $output;
}


/**
 * Display list of appointments for a company.
 *
 * @return string
 *   Markup containing results of a search for a company's appointments.
 */
function _appointments_search_result_page($company_number = '') {
  $output = '';
  drupal_add_css(drupal_get_path('module', 'ch_xml_gateway') . '/css/ch_xml_gateway-default.css', 'module', 'all', TRUE);
  $use_ajax = variable_get('ch_xml_gateway_form_settings_all_ajax_searches', 0);
  if ($use_ajax) {
    drupal_add_library('system', 'ui.dialog');
    drupal_add_js(drupal_get_path('module', 'ch_xml_gateway') . '/js/ch_xml_gateway.js');
    // Add a Drupal.settings value to client javascript to make it easier to
    // call JSON returning function(s)
    drupal_add_js(
      array(
        'chXmlGateway' =>
        array(
          'jsonUrlStub' => url('chxmlgw/json', array('absolute' => TRUE)),
          'accessOfficerDetails' => user_access('query officerdetails'),
        ),
      ),
      'setting'
    );
  }

  if (_valid_company_number(trim($company_number))) {
    $output = _query_gateway('CompanyAppointments', 'html', trim($company_number), NULL, '', '');
  }
  else {
    $output = 'Invalid company number supplied';
  }

  return $output;
}


/**
 * Call the correct XML gateway function with validated parameters.
 *
 * @return string
 *   Themed markup for the result of whichever gateway method was called.
 */
function _query_gateway($message_type = '', $format = 'html', $company_number = '', $officer_search_settings = NULL, $person_id = '', $company_alpha_key = '') {
  $output = '';
  $trimmed_company_number = trim($company_number);

  if (!empty($message_type)) {
    $ch = new CompaniesHouse(variable_get('ch_xml_gateway_user', ''), variable_get('ch_xml_gateway_pass', ''));

    $request_sender_email = variable_get('ch_xml_gateway_sender', '');
    if (!empty($request_sender_email)) {
      $ch->setSenderEmailAddress($request_sender_email);
    }

    if ($message_type == 'CompanyDetails' || $message_type == 'CompanyAppointments') {
      if (_valid_company_number($trimmed_company_number)) {
        if ($message_type == 'CompanyDetails') {
          $output = ch_xml_gateway_query_companydetails($ch, $trimmed_company_number);
        }
        else {
          $output = ch_xml_gateway_query_companyappointments($ch, $trimmed_company_number);
        }
      }
      else {
        $output = "Company number '" . $trimmed_company_number . "' is not valid";
      }
    }
    elseif ($message_type == 'OfficerSearch') {
      if (is_array($officer_search_settings)) {
        // Validate that the minimum amount of parameters have a value.
        if (!empty($officer_search_settings['surname'])) {
          $output = ch_xml_gateway_query_officersearch($ch, $officer_search_settings['surname'], $officer_search_settings['forename'], $officer_search_settings['officer_type'], $officer_search_settings['posttown'], $officer_search_settings['resigned_ind']);
        }
        else {
          $output = 'Missing OfficerSearch parameters';
        }
      }
      else {
        $output = 'Incorrect OfficerSearch parameters';
      }
    }
    elseif ($message_type == 'OfficerDetails') {
      if (!empty($person_id)) {
        $output = ch_xml_gateway_query_officerdetails($ch, $person_id, $format);
      }
      else {
        $output = 'Incorrect OfficerDetails parameters';
      }
    }
    elseif ($message_type == 'NameSearch') {
      if (!empty($company_alpha_key)) {
        $output = ch_xml_gateway_query_namesearch($ch, $company_alpha_key);
      }
      else {
        $output = 'Incorrect NameSearch parameters';
      }
    }
    else {
      $output = 'Unsupported gateway message type \'' . $message_type . '\'';
    }
  }
  else {
    $output = 'No gateway message type found';
  }

  return $output;
}


/**
 * Call XML gateway NameSearch.
 *
 * @return array
 *   Renderable array of search result.
 */
function ch_xml_gateway_query_namesearch($ch_obj, $company_alpha_key) {
  $output['content'] = array(
    '#theme' => 'company_search_result_page',
    '#error' => NULL,
    '#company_list' => NULL,
  );

  if ($company_list = $ch_obj->companyNameSearch($company_alpha_key, 'LIVE')) {
    _log_gateway_access($company_list, $ch_obj->getErrors(), 'NameSearch', array('company_alpha_key' => $company_alpha_key));
    $output['content']['#company_list'] = $company_list;
  }
  else {
    $output['content']['#error'] = 'No NameSearch data';
  }

  return $output;
}


/**
 * Call XML gateway CompanyDetails.
 *
 * @return array
 *   Render array for search result.
 */
function ch_xml_gateway_query_companydetails($ch_obj, $company_number = '') {
  $output['content'] = array(
    '#theme' => 'company_details_result',
    '#error' => NULL,
    '#company_details' => NULL,
  );

  $give_mortgage_totals = (boolean) variable_get('ch_xml_gateway_CompanyDetails_GiveMortTotals', 0);

  if ($company_details = $ch_obj->companyDetails($company_number, $give_mortgage_totals)) {
    _log_gateway_access($company_details, $ch_obj->getErrors(), 'CompanyDetails', array('company_number' => $company_number, 'give_mortgage_totals' => $give_mortgage_totals));
    $output['content']['#company_details'] = $company_details;
  }
  else {
    // @todo Pass any /GovTalkMessage/GovTalkDetails/GovTalkErrors/* info into
    // template instead of text
    $output['content']['#error'] = 'No CompanyDetails data';
  }

  return $output;
}


/**
 * Call XML gateway CompanyAppointments.
 *
 * @return string
 *   Themed markup of result.
 */
function ch_xml_gateway_query_companyappointments($ch_obj, $company_number = '') {
  $output['content'] = array(
    '#theme' => 'company_appointments_result',
    '#error' => NULL,
    '#company_appointments' => NULL,
  );

  $include_resigned = (boolean) variable_get('ch_xml_gateway_CompanyAppointments_IncludeResignedInd', 0);

  if ($company_appointments = $ch_obj->companyAppointmentsDetails('', $company_number, $include_resigned)) {
    _log_gateway_access($company_appointments, $ch_obj->getErrors(), 'CompanyAppointments', array('company_number' => $company_number, 'include_resigned' => $include_resigned));
    $output['content']['#company_appointments'] = $company_appointments;
  }
  else {
    // @todo Pass any /GovTalkMessage/GovTalkDetails/GovTalkErrors/* info into
    // template instead of text
    $output['content']['#error'] = 'No CompanyAppointments data';
  }
  return $output;
}


/**
 * Call XML gateway OfficerSearch.
 *
 * @return string
 *   Themed markup of result.
 */
function ch_xml_gateway_query_officersearch($ch_obj, $surname = '', $forename = '', $officer_type = '', $town = '', $resigned_ind = 0) {
  $output['content'] = array(
    '#theme' => 'officer_search_result',
    '#error' => NULL,
    '#officer_list' => NULL,
  );

  if ($officer_list = $ch_obj->companyOfficerSearch($surname, $forename, $officer_type, $town, $resigned_ind)) {
    $params = array(
      'surname' => $surname,
      'forename' => $forename,
      'officer_type' => $officer_type,
      'town' => $town,
      'resigned_ind' => $resigned_ind,
    );

    _log_gateway_access(
      $officer_list,
      $ch_obj->getErrors(),
      'OfficerSearch',
      $params
    );

    $output['content']['#officer_list'] = $officer_list;
  }
  else {
    // @todo Pass any /GovTalkMessage/GovTalkDetails/GovTalkErrors/* info into
    // template instead of text using $ch_obj->getErrors()
    $output['content']['#error'] = 'No OfficerSearch data';
  }

  return $output;
}


/**
 * Call XML gateway OfficerDetails.
 *
 * @return string
 *   JSON encoded result or renderable array of result of calling
 *   OfficerDetails.
 */
function ch_xml_gateway_query_officerdetails($ch_obj, $person_id, $format = 'html') {
  $output['content'] = array(
    '#theme' => 'officer_details_result',
    '#error' => NULL,
    '#officer_details' => NULL,
  );

  if ($officer_details = $ch_obj->officerDetails($person_id, 'example.com')) {
    $officer_details['formatted_forename'] = _format_officer_forename($officer_details['forename']);
    _log_gateway_access($officer_details, $ch_obj->getErrors(), 'OfficerDetails', array('person_id' => $person_id));
    if ($format == 'json') {
      $output = json_encode($officer_details);
    }
    else {
      $output['content']['#officer_details'] = $officer_details;
    }
  }
  else {
    // @todo Pass any /GovTalkMessage/GovTalkDetails/GovTalkErrors/* info into
    // template instead of text
    if ($format == 'json') {
      // @todo A format error function that returns either simplt XHTML error
      // string or a JSON structure
      $output = '{"error":"No OfficerDetails data"}';
    }
    else {
      $output['content']['#error'] = 'No OfficerDetails data';
    }
  }
  return $output;
}


/**
 * Validate that a value is formatted as a Companies House company number.
 *
 * @return bool
 *   Boolean indicating if company number is valid or not.
 */
function _valid_company_number($number) {
  if (preg_match('/^[A-Z0-9]{8,8}$/', $number)) {
    return TRUE;
  }

  return FALSE;
}


/**
 * Format an array of name strings into a single string, if necessary.
 *
 * @return string
 *   String of joined names.
 */
function _format_officer_forename($name = '') {
  $forename = '';
  if (is_array($name)) {
    foreach ($name['forename'] as $part) {
      $forename .= $part . ' ';
    }

    $forename = rtrim($forename);
  }
  else {
    $forename = $name;
  }

  return $forename;
}


/**
 * Log user interaction with the XML gateway.
 *
 * Logs which services users have used.
 */
function _log_gateway_access($ch_obj_result, $ch_obj_errors, $service_name = '', $params = array()) {
  global $user;
  $record = new stdClass();
  $record->uid = $user->uid;
  $record->query_timestamp = time();
  $record->service_name = $service_name;
  $record->params_json = json_encode($params);

  if (count($ch_obj_errors) > 0) {
    $record->errors_json = json_encode($ch_obj_errors);
  }

  if (count($ch_obj_result) > 0) {
    $record->response_json = json_encode($ch_obj_result);
  }

  drupal_write_record('ch_xml_gateway_query', $record);
}


/**
 * Extracts different text strings from JSON object, for a service name.
 *
 * @return string
 *   String of text representing the service paramters.
 */
function _format_search_history_search_params($service_name, $params_as_json) {
  $output = '';

  switch ($service_name) {
    case 'NameSearch':
      // The string of text that the user entered.
      $decoded = json_decode($params_as_json, TRUE);
      $output = $decoded['company_alpha_key'];
      break;

    case 'CompanyDetails':
    case 'CompanyAppointments':
      // Just the Companies House company number.
      $decoded = json_decode($params_as_json, TRUE);
      $output = $decoded['company_number'];
      break;

    case 'OfficerSearch':
      // Form can be configured to take other strings. Formatting may need to be
      // selective if form is customised.
      $decoded = json_decode($params_as_json, TRUE);
      $forename = (is_array($decoded['forename'])) ? implode(' ', $decoded['forename']) : $decoded['forename'];
      $output = $forename . ' ' . $decoded['surname'];
      break;

    case 'OfficerDetails':
      // An encoded key set by CH. Can't show anything meaningful?
      // $decoded = json_decode($params_as_json, TRUE);
      $output = t('Specific details of a company appointment');
      break;
  }

  return $output;
}


/**
 * Custom menu item access check.
 *
 * Allow access if the current user is:
 *   - logged in
 *   - has the user id that is being used as a URL argument OR is uid = 1
 *
 * @return bool
 *   Boolean indicating access allowed or not.
 */
function _gateway_history_page_access($url_user_id) {
  global $user;

  if ($user->uid > 0 && ($user->uid == $url_user_id || $user->uid == 1)) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}


/**
 * Page showing a list of the searches a user has made via the gateway.
 *
 * Not all services are billable if this history were to be used for that
 * purpose.
 *
 * @return array
 *   Render array containing elements defining the users previous gateway usage.
 */
function _user_gateway_history_page($url_user_id) {
  $query = db_select('ch_xml_gateway_query', 'ch')->extend('PagerDefault');
  $query->fields(
    'ch',
    array('id', 'query_timestamp', 'service_name', 'params_json')
  );
  $query->condition('ch.uid', $url_user_id);
  $query->limit(20);
  $results = $query->execute();

  $body = array();

  foreach ($results as $row) {
    $body[] = array(
      date('Y-m-d H:i:s',
      $row->query_timestamp),
      l($row->service_name, 'chxmlgw/gateway-history/user/' . $url_user_id . '/' . $row->id),
      _format_search_history_search_params($row->service_name, $row->params_json),
    );
  }

  $page = array();
  $page['table'] = array(
    '#theme' => 'table',
    '#header' => array(t('Date queried'), t('Service'), t('Parameter(s)')),
    '#rows' => $body,
  );

  $page['pager'] = array(
    '#theme' => 'pager',
  );

  return $page;
}


/**
 * Page to show the details of a previously submitted gateway query.
 *
 * @return array
 *   Renderable array containing details of a previous gateway query.
 */
function _gateway_previous_query_page($url_user_id = 0, $query_id = 0) {
  drupal_add_css(drupal_get_path('module', 'ch_xml_gateway') . '/css/ch_xml_gateway-default.css', 'module', 'all', TRUE);
  $page = array('content' => array());
  $query = 'SELECT * FROM {ch_xml_gateway_query} ch WHERE id = :id AND uid = :user_id';
  $result = db_query($query, array(':id' => $query_id, ':user_id' => $url_user_id));
  $row = $result->fetchObject();

  if ($row) {
    $response = json_decode($row->response_json, TRUE);

    $meta['user_id'] = $url_user_id;
    $meta['service_name'] = $row->service_name;
    $meta['query_timestamp'] = date('Y-m-d H:i:s', $row->query_timestamp);
    $meta['query_params'] = json_decode($row->params_json, TRUE);
    $page['content']['#meta'] = $meta;

    switch ($row->service_name) {
      case 'NameSearch':
        $page['content']['#theme'] = 'historic_company_search';
        $page['content']['#company_list'] = $response;
        break;

      case 'CompanyDetails':
        $page['content']['#theme'] = 'historic_company_details';
        $page['content']['#company_details'] = $response;
        break;

      case 'CompanyAppointments':
        $page['content']['#theme'] = 'historic_company_appointments';
        $page['content']['#company_appointments'] = $response;
        break;

      case 'OfficerDetails':
        $page['content']['#theme'] = 'historic_officer_details';
        $page['content']['#officer_details'] = $response;
        break;

      case 'OfficerSearch':
        $page['content']['#theme'] = 'historic_officer_search';
        $page['content']['#officer_list'] = $response;
        break;
    }
  }
  else {
    // @todo Add to watchdog
    $page['content']['#markup'] = 'There was a problem retrieving that query. Please contact an administrator. Query id: ' . $query_id . ', user id: ' . $url_user_id;
  }

  return $page;
}


/**
 * Format a string to be the title displayed on the user gateway history page.
 *
 * @return string
 *   Text containing the username of the users history that's being viewed.
 */
function _gateway_history_page_title($user_id) {
  $user_name = _get_user_name_from_id($user_id);
  $title = '"' . $user_name . '" Companies House XML Gateway usage';
  return $title;
}


/**
 * Load a Drupal user account from its ID and return its username value.
 *
 * @return string
 *   A Drupal account username.
 */
function _get_user_name_from_id($user_id) {
  $name = 'Anonymous';
  $account = '';

  if ($user_id > 0) {
    $account = user_load($user_id);
    $name = $account->name;
  }

  return $name;
}


/**
 * Implements hook_theme().
 */
function ch_xml_gateway_theme() {
  return array(
    'company_search_page' => array(
      'template' => 'company-search-page',
      'path' => drupal_get_path('module', 'ch_xml_gateway') . '/templates',
      'variables' => array(
        'form' => NULL,
      ),
    ),
    'company_search_result_page' => array(
      'template' => 'company-search-result',
      'path' => drupal_get_path('module', 'ch_xml_gateway') . '/templates',
      'variables' => array(
        'error' => NULL,
        'company_list' => NULL,
      ),
    ),
    'company_details_page' => array(
      'template' => 'company-details-page',
      'path' => drupal_get_path('module', 'ch_xml_gateway') . '/templates',
      'variables' => array(
        'form' => NULL,
      ),
    ),
    'company_details_result' => array(
      'template' => 'company-details-result',
      'path' => drupal_get_path('module', 'ch_xml_gateway') . '/templates',
      'variables' => array(
        'error' => NULL,
        'company_details' => NULL,
      ),
    ),
    'company_appointments_search_page' => array(
      'template' => 'company-appointments-search-page',
      'path' => drupal_get_path('module', 'ch_xml_gateway') . '/templates',
      'variables' => array(
        'form' => NULL,
      ),
    ),
    'company_appointments_result' => array(
      'template' => 'company-appointments-result',
      'path' => drupal_get_path('module', 'ch_xml_gateway') . '/templates',
      'variables' => array(
        'error' => NULL,
        'company_appointments' => NULL,
      ),
    ),
    'officer_details_result' => array(
      'template' => 'officer-details-result',
      'path' => drupal_get_path('module', 'ch_xml_gateway') . '/templates',
      'variables' => array(
        'error' => NULL,
        'officer_details' => NULL,
      ),
    ),
    'officer_search_page' => array(
      'template' => 'officer-search-page',
      'path' => drupal_get_path('module', 'ch_xml_gateway') . '/templates',
      'variables' => array(
        'form' => NULL,
      ),
    ),
    'officer_search_result' => array(
      'template' => 'officer-search-result',
      'path' => drupal_get_path('module', 'ch_xml_gateway') . '/templates',
      'variables' => array(
        'error' => NULL,
        'officer_list' => NULL,
      ),
    ),
    // Query history are read only (no links to other pages).
    'historic_company_search' => array(
      'template' => 'historic-company-search',
      'path' => drupal_get_path('module', 'ch_xml_gateway') . '/templates',
      'variables' => array(
        'meta' => NULL,
        'company_list' => NULL,
      ),
    ),
    'historic_company_details' => array(
      'template' => 'historic-company-details',
      'path' => drupal_get_path('module', 'ch_xml_gateway') . '/templates',
      'variables' => array(
        'meta' => NULL,
        'company_details' => NULL,
      ),
    ),
    'historic_company_appointments' => array(
      'template' => 'historic-company-appointments',
      'path' => drupal_get_path('module', 'ch_xml_gateway') . '/templates',
      'variables' => array(
        'meta' => NULL,
        'company_appointments' => NULL,
      ),
    ),
    'historic_officer_details' => array(
      'template' => 'historic-officer-details',
      'path' => drupal_get_path('module', 'ch_xml_gateway') . '/templates',
      'variables' => array(
        'meta' => NULL,
        'officer_details' => NULL,
      ),
    ),
    'historic_officer_search' => array(
      'template' => 'historic-officer-search',
      'path' => drupal_get_path('module', 'ch_xml_gateway') . '/templates',
      'variables' => array(
        'meta' => NULL,
        'officer_list' => NULL,
      ),
    ),
  );
}


/**
 * Preprocess company appointments search result template variables.
 *
 * @see templates/company-appointments-result.tpl.php.
 */
function template_preprocess_company_appointments_result(&$variables) {
  $appointments = $variables['company_appointments']['appointments'];

  for ($i = 0; $i < $variables['company_appointments']['num_current_appt']; $i++) {
    $appointments[$i]['index'] = ($i + 1);
    // Base 64 encode the officer id so various chars, such as '+', don't get
    // URL encoded when used in links
    $appointments[$i]['person_id_base64'] = base64_encode($appointments[$i]['person_id']);
  }

  $variables['company_appointments']['appointments'] = $appointments;
}
